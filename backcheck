#!/bin/bash

rcharBefore=0
finishing=0

function handleTrap {
	# The current file is not yet (fully) processed, thus decrement counter
	(( processed-- ))
	if [ "$processed" -lt 0 ]; then
		processed=0
	fi
	finish
}
function finish {
	if [ "$finishing" -gt 0 ]; then
		# Make sure we don't call this more than once (race condition)
		return
	fi
	finishing=1
	local rchar="$(($(grep -oP '(?<=rchar: ).*' /proc/$$/io) - rcharBefore))"
	sizeEstimate="$(numfmt --to=iec "$((rchar / 2))")"

	echo
	if [ "$1" == 'timeout' ]; then
		echo "Timeout reached, successfully processed $processed files (roughly $sizeEstimate)."
	else
		echo "Successfully processed $processed files (roughly $sizeEstimate)."
	fi

	tearDown 0
}

# Remove temporary files and exit
function tearDown {
	rm -f "/tmp/backcheck-$$-backup-sum" "/tmp/backcheck-$$-source-sum"
	# shellcheck disable=SC2046
	kill $(jobs -p) 2>/dev/null
	exit "$1"
}
trap handleTrap SIGINT SIGTERM

# Assure that the given files exist and have matching modification times and size.
function statMatch {
	stats="$(stat --printf '%s-%Y-' "$1" "$2" 2>&1)"
	if [[ ! "$stats" =~ ^([0-9]*)-([0-9]*)-([0-9]*)-([0-9]*)-$ ]]; then
		if [ "$verbose" -gt 0 ]; then
			if [ ! -f "$1" ]; then
				echo -e "\nFile does not exist: '$1'."
			fi
			if [ ! -f "$2" ]; then
				echo -e "\nFile does not exist: '$2'."
			fi
		fi
		return 1
	fi
	if [ ! "${BASH_REMATCH[1]}" == "${BASH_REMATCH[3]}" ]; then
		if [ "$verbose" -gt 0 ]; then
			echo -e "\nFile size mismatch: '$1' <> '$2'."
		fi
		return 1
	fi
	if [ ! "${BASH_REMATCH[2]}" == "${BASH_REMATCH[4]}" ]; then
		if [ "$verbose" -gt 0 ]; then
			echo -e "\nFile modification time mismatch: '$1' <> '$2'."
		fi
		return 1
	fi
	return 0
}

function usage {
	echo "Backcheck 1.2.3-PRE"
	echo "Usage: backcheck [--timeout s] [--verbose|--debug] backup-path source-path"
	echo
	echo "Check that the files in backup-path are readable and identical to the ones in source-path."
	echo "This can be used to partially (with --timeout, checking a random selection of files) or "
	echo "to fully test a backup (done by rsync -a or something similar)."
	echo
	echo -e "\t--timeout\t\tAbort after checking files for at least this many seconds."
	echo -e "\t--verbose\t\tMore verbose output (shows details when a file is skipped)."
	echo -e "\t--debug\t\t\tVery verbose output (shows details about all files processed)."
}

if [ "$1" == "--help" ]; then
	usage

	exit 0
fi
if [ $# -lt 2 ]; then
	echo "$(basename "$0"): missing operands"
	echo "Try '$(basename "$0") --help' for more information."

	exit 1
fi

backupPath="$(dirname "${*: -2:1}/.")"
sourcePath="$(dirname "${*: -1}/.")"

if [ ! -d "$backupPath" ]; then
	echo "Backup directory '$backupPath' doesn't exist, aborting."

	exit 1
fi
if [ ! -d "$sourcePath" ]; then
	echo "Source directory '$sourcePath' doesn't exist, aborting."

	exit 1
fi

# If possible, call ourselves in bwrap with the source and backup paths read only again
# that way we can ensure to not alter the file's atime.
if [ ! "$1" == "--postwrap" ] && [ -f "$0" ] && bwrap --ro-bind / / true 2>/dev/null; then
	# Use absolute paths here, as bwrap doesn't understand relative paths
	backupPath="$(realpath "$backupPath")"
	sourcePath="$(realpath "$sourcePath")"

	exec bwrap --dev-bind / / --ro-bind "$backupPath" "$backupPath" --ro-bind "$sourcePath" "$sourcePath" /bin/bash "$0" --postwrap "$@"
elif [ "$1" == "--postwrap" ]; then
	shift
fi

timeout=-1
debug=0
verbose=0

while [ $# -gt 2 ]; do
	case "$1" in
		--timeout)
			if ! (($2 + 0)) 2>/dev/null; then
				echo 'Invalid argument: Timeout must be an integer.'

				exit 1
			fi
			timeout="$2"
			shift 2
		;;
		--verbose)
			verbose=1
			shift
		;;
		--debug)
			debug=1
			verbose=1
			shift
		;;
		*)
			echo "Unknown argument: $1"
			exit 1
		;;
	esac
done

# Derived from https://stackoverflow.com/a/23357277
backupFiles=()
while IFS=  read -r -d $'\0'; do
	backupFiles+=("$REPLY")
done < <(find "$backupPath" -type f -print0)

backupFilesCount="${#backupFiles[@]}"
if [ "$backupFilesCount" -eq 0 ]; then
	echo "Nothing to check, aborting."

	exit 0
fi

processed=0
# Note: Once we drop bash 4 support, switch to EPOCHSECONDS here (and below)
startTime="$(date +"%s")"
endTime=$(((startTime + timeout)))

rcharBefore="$(grep -oP '(?<=rchar: ).*' /proc/$$/io)"

if ! mkfifo --mode=600 /tmp/backcheck-$$-backup-sum /tmp/backcheck-$$-source-sum 2>/dev/null; then
	echo "Could not create named pipes /tmp/backcheck-$$-backup-sum /tmp/backcheck-$$-source-sum, aborting."

	exit 1
fi

for i in $(shuf -i 0-$(((backupFilesCount - 1)))); do
	if [ "$timeout" -gt 0 ]; then
		if [ "$endTime" -lt "$(date +"%s")" ]; then
			break
		fi
	fi
	(( processed++ ))

	backupFile="${backupFiles[$i]}"
	sourceFile="${backupFile/"$backupPath"/$sourcePath}"
	if [ $debug -gt 0 ]; then
		echo -e "\nChecking '$backupFile' <> '$sourceFile'."
	fi

	if ! statMatch "$backupFile" "$sourceFile"; then
		echo -n '_'
		continue
	fi

	# We need to use command substitution here in order for the md5sums to start in parallel
	# (before we're trying to read from the named pipes).
	# shellcheck disable=2005
	echo "$(md5sum "$backupFile" 2>&1)" > /tmp/backcheck-$$-backup-sum &
	# shellcheck disable=2005
	echo "$(md5sum "$sourceFile" 2>&1)" > /tmp/backcheck-$$-source-sum &
	backupFileSum="$(</tmp/backcheck-$$-backup-sum)"
	sourceFileSum="$(</tmp/backcheck-$$-source-sum)"
	if [[ "$backupFileSum" =~ ^\\?([0-9a-f]{32}) ]]; then
		backupFileSum="${BASH_REMATCH[1]}"
	else
		echo
		echo
		echo "Hashing '$backupFile' failed ($backupFileSum), aborting."

		tearDown 255
	fi
	if [[ "$sourceFileSum" =~ ^\\?([0-9a-f]{32}) ]]; then
		sourceFileSum="${BASH_REMATCH[1]}"
	else
		echo
		echo "Warning: Hashing '$sourceFile' failed ($sourceFileSum), continuing."
		continue
	fi

	if [ "$backupFileSum" == "$sourceFileSum" ]; then
		echo -n '.'
	else
		if ! statMatch "$backupFile" "$sourceFile"; then
			# Check if the file stats still match
			echo -n '_'
			continue
		fi

		echo
		echo

		echo "Checksum mismatch '$backupFile' ($backupFileSum) <> '$sourceFile' ($sourceFileSum), aborting."

		tearDown 255
	fi
done

if [ "$processed" -ne "$backupFilesCount" ]; then
	finish timeout
else
	finish
fi
